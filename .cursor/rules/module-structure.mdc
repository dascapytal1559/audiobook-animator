---
description: 
globs: 
alwaysApply: true
---
# module-structure

Each module in the Audiobook Animator project should follow the established structure:

## Directory Structure
```
src/
  module-name/
    cli.ts       # Command-line interface
    paths.ts     # Path utilities and shared types
    [other specialized files...]
```

## Import Organization

Follow VSCode's auto-import organizer pattern:
- Order imports in the following groups, separated by blank lines:
  1. Node.js built-ins (e.g., `fs`, `path`, `util`) alphabetically
  2. External packages/libraries alphabetically
  3. Internal imports from the project alphabetically
- For multi-item imports, use curly braces with items sorted alphabetically:
  ```typescript
  import {
    findChapterAudioFile,
    getGeminiSummary,
  } from "../gemini-summary/paths";
  ```

## Code Formatting

Follow VSCode's auto-formatter conventions:
- Use 2-space indentation
- Use double quotes for strings
- Add trailing commas in multiline arrays and objects
- Break long function signatures across multiple lines:
  ```typescript
  function validateTranscriptDuration(
    transcript: Transcript,
    expectedDuration: number
  ): void {
    // Implementation
  }
  ```
- Break template strings and long expressions across multiple lines
- Place spaces around operators and after commas
- Format numeric expressions with spaces: `45 * 60` (not `45*60`)

## File Organization

### 1. Imports
- Follow the import organization rules above
- Place constants immediately after imports

### 2. Constants
- Define constants at the top level
- Group related constants together
- Format with proper spacing: `const MAX_CHUNK_DURATION = 45 * 60;`

### 3. Section Organization
- Group functions by purpose using section comments (e.g., `// --- File Utilities ---`)
- Define types directly before the functions that use them
- Keep related functions together in the same section

### 4. Path Utilities (paths.ts)
- Organize by section (book utilities, chapter utilities, etc.)
- Place type definitions before the first function that uses them
- Group related path functions together

### 5. Core Logic
- Main functionality of the module
- Processing functions
- API interaction

### 6. CLI Logic
- Command definition using Commander.js
- Options and flags 
- CLI action handlers

### 7. Entrypoint
- Main function that sets up and executes the CLI
- Module execution check (if require.main === module)

## Cross-Module Integration

- Modules later in the pipeline should import types and utilities from earlier modules
- Use paths.ts as the interface for sharing types and utilities between modules
- Standard file naming conventions should be consistent across modules
- Reuse shared data loading/saving patterns across modules

## Common Patterns

- Error Handling: Validate inputs early, use try/catch, provide descriptive errors
- File Management: Save metadata, use consistent naming, check for existing files
- Performance Tracking: Use timer utilities, log progress for long operations
- CLI Options: Use the FLAGS object from common/flags, support batch processing
- File Paths: Use path utilities from paths.ts, never hardcode paths directly

## Pipeline Integration

- Each module should read data produced by previous pipeline steps using the earlier module's path utilities
- Output files should follow consistent naming patterns for use by later modules
- If chunking a file, ensure consistent naming and metadata for chunks 
- Always provide appropriate metadata files alongside content files

## AI Integration

- Authentication: Use environment variables for API keys with dotenv
- File Upload: Handle large files, save metadata, monitor processing state
- Prompt Engineering: Structure prompts clearly with specific output format
- Context Sharing: Include context from previous pipeline steps in AI prompts when relevant

Always reuse common utilities from src/common/ and maintain consistent CLI interfaces with existing modules.
